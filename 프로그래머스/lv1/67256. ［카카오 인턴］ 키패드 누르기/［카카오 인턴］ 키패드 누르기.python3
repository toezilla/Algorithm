from collections import deque


def distance(tuple, left, right):
    left_dist = abs(tuple[0] - left[0]) + abs(tuple[1] - left[1])
    right_dist = abs(tuple[0] - right[0]) + abs(tuple[1] - right[1])

    if left_dist > right_dist:
        return (right)

    elif left_dist < right_dist:
        return (left)

    elif left_dist == right_dist:
        if mainhand == "right":
            return (right)
        else:
            return (left)


def bfs(tuple, number):
    Q = deque()
    Q.append(tuple)

    while Q:
        now = Q.popleft()
        if keypad[now[0]][now[1]] == number:
            break
        else:
            for i in range(4):
                next_1 = now[0] + dx[i]
                next_2 = now[1] + dy[i]
                if 0 <= next_1 <= 3 and 0 <= next_2 <= 2:
                    Q.append((next_1, next_2))
    return (now)


def solution(numbers, hand):
    global keypad
    global dx, dy
    global mainhand
    
    mainhand = hand
    answer = ''
    keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], ["*", 0, "#"]]
    left = (3, 0)
    right = (3, 2)

    dx = [1, -1, 0, 0]
    dy = [0, 0, 1, -1]

    for number in numbers:

        if number in [1, 4, 7]:
            left = bfs(left, number)
            answer = answer + "L"

        elif number in [3, 6, 9]:
            right = bfs(right, number)
            answer = answer + "R"

        else:
            if number == 0:
                tmp = distance((3, 1), left, right)
                if tmp == left:
                    left = bfs(left, number)
                    answer = answer + "L"

                else:
                    right = bfs(right, number)
                    answer = answer + "R"
            else:
                tmp = distance((number // 3, 1), left, right)
                print(tmp)
                if tmp == left:
                    left = bfs(left, number)
                    answer = answer + "L"

                elif tmp == right:
                    right = bfs(right, number)
                    answer = answer + "R"

    return answer